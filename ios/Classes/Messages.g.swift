// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Data class for notification payload
///
/// Generated class from Pigeon that represents data sent in messages.
struct NotificationData {
  var title: String
  var body: String
  var imageUrl: String? = nil
  var deepLink: String? = nil
  var data: [String?: String?]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NotificationData? {
    let title = pigeonVar_list[0] as! String
    let body = pigeonVar_list[1] as! String
    let imageUrl: String? = nilOrValue(pigeonVar_list[2])
    let deepLink: String? = nilOrValue(pigeonVar_list[3])
    let data: [String?: String?]? = nilOrValue(pigeonVar_list[4])

    return NotificationData(
      title: title,
      body: body,
      imageUrl: imageUrl,
      deepLink: deepLink,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      body,
      imageUrl,
      deepLink,
      data,
    ]
  }
}

/// Data class for FCM token
///
/// Generated class from Pigeon that represents data sent in messages.
struct TokenData {
  var token: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> TokenData? {
    let token = pigeonVar_list[0] as! String

    return TokenData(
      token: token
    )
  }
  func toList() -> [Any?] {
    return [
      token
    ]
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return NotificationData.fromList(self.readValue() as! [Any?])
    case 130:
      return TokenData.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NotificationData {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? TokenData {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}


/// Interface for host platform API calls
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ClixHostApi {
  /// Get the FCM token from the platform
  func getFcmToken(completion: @escaping (Result<String, Error>) -> Void)
  /// Get the APNS token from the platform (iOS only)
  func getApnsToken(completion: @escaping (Result<String, Error>) -> Void)
  /// Initialize Firebase messaging
  func initializeFirebase(completion: @escaping (Result<Void, Error>) -> Void)
  /// Request notification permissions
  func requestPermissions(completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ClixHostApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `ClixHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ClixHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Get the FCM token from the platform
    let getFcmTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.clix_flutter.ClixHostApi.getFcmToken\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getFcmTokenChannel.setMessageHandler { _, reply in
        api.getFcmToken { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getFcmTokenChannel.setMessageHandler(nil)
    }
    /// Get the APNS token from the platform (iOS only)
    let getApnsTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.clix_flutter.ClixHostApi.getApnsToken\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getApnsTokenChannel.setMessageHandler { _, reply in
        api.getApnsToken { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getApnsTokenChannel.setMessageHandler(nil)
    }
    /// Initialize Firebase messaging
    let initializeFirebaseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.clix_flutter.ClixHostApi.initializeFirebase\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeFirebaseChannel.setMessageHandler { _, reply in
        api.initializeFirebase { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initializeFirebaseChannel.setMessageHandler(nil)
    }
    /// Request notification permissions
    let requestPermissionsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.clix_flutter.ClixHostApi.requestPermissions\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestPermissionsChannel.setMessageHandler { _, reply in
        api.requestPermissions { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      requestPermissionsChannel.setMessageHandler(nil)
    }
  }
}
/// Interface for Flutter API calls from platform
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ClixFlutterApiProtocol {
  /// Called when a notification is received
  func onNotificationReceived(notification notificationArg: NotificationData, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when a notification is opened
  func onNotificationOpened(notification notificationArg: NotificationData, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when FCM token is refreshed
  func onTokenRefresh(token tokenArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class ClixFlutterApi: ClixFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: MessagesPigeonCodec {
    return MessagesPigeonCodec.shared
  }
  /// Called when a notification is received
  func onNotificationReceived(notification notificationArg: NotificationData, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.clix_flutter.ClixFlutterApi.onNotificationReceived\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([notificationArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Called when a notification is opened
  func onNotificationOpened(notification notificationArg: NotificationData, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.clix_flutter.ClixFlutterApi.onNotificationOpened\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([notificationArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// Called when FCM token is refreshed
  func onTokenRefresh(token tokenArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.clix_flutter.ClixFlutterApi.onTokenRefresh\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([tokenArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
